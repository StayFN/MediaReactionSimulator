Traceback (most recent call last):
  File "C:\Users\Gregor Debus\AppData\Local\Programs\Python\Python311\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Gregor Debus\AppData\Local\Programs\Python\Python311\Lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gregor Debus\AppData\Local\Programs\Python\Python311\Lib\site-packages\jupyter_core\utils\__init__.py", line 168, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Gregor Debus\AppData\Local\Programs\Python\Python311\Lib\asyncio\base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\Gregor Debus\AppData\Local\Programs\Python\Python311\Lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Gregor Debus\AppData\Local\Programs\Python\Python311\Lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Gregor Debus\AppData\Local\Programs\Python\Python311\Lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import json
import re
import matplotlib.pyplot as plt
import numpy as np

RESULTS_FUNNY = "files_for_python_code/Report_Shorts_with_summary_gregor_funny_experiment_results_cleaned.csv"

df_shorts = pd.read_csv(RESULTS_FUNNY, sep=",")

results = {}
results['low_ssc_characteristics'] = []
results['high_ssc_characteristics'] = []
results['low_ssc_defined'] = []
results['high_ssc_defined'] = []

total_laugh_low_ssc_characteristics = 0
total_smile_low_ssc_characteristics = 0
total_amusement_low_ssc_characteristics = 0

total_laugh_high_ssc_characteristics = 0
total_smile_high_ssc_characteristics = 0
total_amusement_high_ssc_characteristics = 0

total_laugh_low_ssc_defined = 0
total_smile_low_ssc_defined = 0
total_amusement_low_ssc_defined = 0

total_laugh_high_ssc_defined = 0
total_smile_high_ssc_defined = 0
total_amusement_high_ssc_defined = 0

for index, row in df_shorts.iterrows():
    results['low_ssc_characteristics'].append(json.loads(row['low ssc characteristics']))
    results['high_ssc_characteristics'].append(json.loads(row['high ssc characteristics']))
    results['low_ssc_defined'].append(json.loads(row['low ssc defined']))
    results['high_ssc_defined'].append(json.loads(row['high ssc defined']))

for i in range(0,len(results['low_ssc_characteristics'])):
    total_laugh_low_ssc_characteristics += results['low_ssc_characteristics'][i]["smiles"]
    total_smile_low_ssc_characteristics += results['low_ssc_characteristics'][i]["laughs"]
    total_amusement_low_ssc_characteristics += results['low_ssc_characteristics'][i]["amusement_rating"]
    
    total_laugh_high_ssc_characteristics += results['high_ssc_characteristics'][i]["smiles"]
    total_smile_high_ssc_characteristics += results['high_ssc_characteristics'][i]["laughs"]
    total_amusement_high_ssc_characteristics += results['high_ssc_characteristics'][i]["amusement_rating"]
    
    total_laugh_low_ssc_defined += results['low_ssc_defined'][i]["smiles"]
    total_smile_low_ssc_defined += results['low_ssc_defined'][i]["laughs"]
    total_amusement_low_ssc_defined += results['low_ssc_defined'][i]["amusement_rating"]
    
    total_laugh_high_ssc_defined += results['high_ssc_defined'][i]["smiles"]
    total_smile_high_ssc_defined += results['high_ssc_defined'][i]["laughs"]
    total_amusement_high_ssc_defined += results['high_ssc_defined'][i]["amusement_rating"]

avg_laugh_low_ssc_characteristics = total_laugh_low_ssc_characteristics/len(results['low_ssc_characteristics'])
avg_smile_low_ssc_characteristics = total_smile_low_ssc_characteristics/len(results['low_ssc_characteristics'])
avg_amusement_low_ssc_characteristics = total_amusement_low_ssc_characteristics/len(results['low_ssc_characteristics'])

avg_laugh_high_ssc_characteristics = total_laugh_high_ssc_characteristics/len(results['low_ssc_characteristics'])
avg_smile_high_ssc_characteristics = total_smile_high_ssc_characteristics/len(results['low_ssc_characteristics'])
avg_amusement_high_ssc_characteristics = total_amusement_high_ssc_characteristics/len(results['low_ssc_characteristics'])

avg_laugh_low_ssc_defined = total_laugh_low_ssc_defined/len(results['low_ssc_characteristics'])
avg_smile_low_ssc_defined = total_smile_low_ssc_defined/len(results['low_ssc_characteristics'])
avg_amusement_low_ssc_defined = total_amusement_low_ssc_defined/len(results['low_ssc_characteristics'])

avg_laugh_high_ssc_defined = total_laugh_high_ssc_defined/len(results['low_ssc_characteristics'])
avg_smile_high_ssc_defined = total_smile_high_ssc_defined/len(results['low_ssc_characteristics'])
avg_amusement_high_ssc_defined = total_amusement_high_ssc_defined/len(results['low_ssc_characteristics'])

plt.rcParams.update({'font.size': 7})

x = np.arange(3)
y1 = [avg_amusement_high_ssc_characteristics, avg_laugh_high_ssc_characteristics, avg_smile_high_ssc_characteristics]
y2 = [avg_amusement_low_ssc_characteristics, avg_laugh_low_ssc_characteristics, avg_smile_low_ssc_characteristics]
width = 0.2

fig, plt = plt.subplots(figsize=(12,8))
plt.bar(x-0.1,y1, width, color='lightseagreen')
plt.bar(x+0.1,y2, width, color='seagreen')
plt.xticks(x, ['Avg. Amusement', 'Avg. Laughs', 'Avg. Smiles'])
plt.legend(["High SSC", "Low SSC "])
plt.show()

x = np.arange(3)
y1 = [avg_amusement_high_ssc_defined, avg_laugh_high_ssc_defined, avg_smile_high_ssc_defined]
y2 = [avg_amusement_low_ssc_defined, avg_laugh_low_ssc_defined, avg_smile_low_ssc_defined]
width = 0.2

fig, plt = plt.subplots(figsize=(12,8))
plt.bar(x-0.1,y1, width, color='lightseagreen')
plt.bar(x+0.1,y2, width, color='seagreen')
plt.xticks(x, ['Avg. Amusement', 'Avg. Laughs', 'Avg. Smiles'])
plt.legend(["High SSC", "Low SSC "]) 
plt.show()
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mAttributeError[0m                            Traceback (most recent call last)
Cell [1;32mIn[1], line 82[0m
[0;32m     80[0m plt[38;5;241m.[39mbar(x[38;5;241m-[39m[38;5;241m0.1[39m,y1, width, color[38;5;241m=[39m[38;5;124m'[39m[38;5;124mlightseagreen[39m[38;5;124m'[39m)
[0;32m     81[0m plt[38;5;241m.[39mbar(x[38;5;241m+[39m[38;5;241m0.1[39m,y2, width, color[38;5;241m=[39m[38;5;124m'[39m[38;5;124mseagreen[39m[38;5;124m'[39m)
[1;32m---> 82[0m [43mplt[49m[38;5;241;43m.[39;49m[43mxticks[49m(x, [[38;5;124m'[39m[38;5;124mAvg. Amusement[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mAvg. Laughs[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mAvg. Smiles[39m[38;5;124m'[39m])
[0;32m     83[0m plt[38;5;241m.[39mlegend([[38;5;124m"[39m[38;5;124mHigh SSC[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mLow SSC [39m[38;5;124m"[39m])
[0;32m     84[0m plt[38;5;241m.[39mshow()

[1;31mAttributeError[0m: 'Axes' object has no attribute 'xticks'

